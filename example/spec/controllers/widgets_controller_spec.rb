require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe WidgetsController, :type => :controller do
 

  # This should return the minimal set of attributes required to create a valid
  # Widget. As you add validations to Widget, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { 
    {name: 'john'} 
  }

  let(:invalid_attributes) {
    {name: 'jill'}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # WidgetsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all widgets as @widgets" do
      widget = Widget.create! valid_attributes
      puts "widgetget_index"
      puts widget.to_yaml
      puts "over"
      pp widget.to_yaml
      puts "over2"  
      get :index, {}, valid_session
      expect(assigns(:widgets)).to eq([widget])
      puts "finaaaalllllyyy"
      puts assigns(:widgets).to_yaml
      puts "wigetd"
      puts [widget].to_yaml
    end
  end

  describe "GET show" do
    it "assigns the requested widget as @widget" do
      widget = Widget.create! valid_attributes
      puts "widgetgetshow"
      puts widget.to_yaml
      puts "beforeshow"
      get :show, {:id => widget.to_param}, valid_session
      puts "aftershow"
      expect(assigns(:widget)).to eq(widget)
    end
  end

  describe "GET new" do
    it "assigns a new widget as @widget" do
      get :new, {}, valid_session
      expect(assigns(:widget)).to be_a_new(Widget)
    end
  end

  describe "GET edit" do
    it "assigns the requested widget as @widget" do
      widget = Widget.create! valid_attributes
      puts "widget.to_param"
      puts widget.to_param
      get :edit, {:id => widget.to_param}, valid_session
      expect(assigns(:widget)).to eq(widget)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Widget" do
        expect {
          post :create, {:widget => valid_attributes}, valid_session
        }.to change(Widget, :count).by(1)
      end

      it "assigns a newly created widget as @widget" do
        post :create, {:widget => valid_attributes}, valid_session
        expect(assigns(:widget)).to be_a(Widget)
        expect(assigns(:widget)).to be_persisted
      end

      it "redirects to the created widget" do
        post :create, {:widget => valid_attributes}, valid_session
        expect(response).to redirect_to(Widget.last)
      end
    end

    describe "with invalid params" do
      
      it "assigns a newly created but unsaved widget as @widget" do
        allow_any_instance_of(Widget).to receive(:save).and_return(false)
        post :create, {:widget => invalid_attributes}, valid_session
        expect(assigns(:widget)).to be_a_new(Widget) 
      end

      it "re-renders the 'new' template" do
        allow_any_instance_of(Widget).to receive(:save).and_return(false)
        post :create, {:widget => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {name: 'rosy'}
      }

      it "updates the requested widget" do
        widget = Widget.create! valid_attributes
        puts "widgetupdate" # john
      puts widget.to_yaml
       expect_any_instance_of(Widget).to receive(:update).with({ :name => "rosy" })
        puts "widgetupdate2" #john
      puts widget.to_yaml
        put :update, {:id => widget.to_param, :widget => new_attributes}, valid_session
      puts "widgetupdate3"
      puts widget.to_yaml
         
      end
      

      it "assigns the requested widget as @widget" do
        widget = Widget.create! valid_attributes
         puts "widgettttttttupdate3"
      puts widget.to_yaml
        put :update, {:id => widget.to_param, :widget => valid_attributes}, valid_session
        expect(assigns(:widget)).to eq(widget)
        puts "widgeeeeeeeeeeeeeeeetupdate3"
      puts widget.to_yaml
      end

      it "redirects to the widget" do
        widget = Widget.create! valid_attributes
        put :update, {:id => widget.to_param, :widget => valid_attributes}, valid_session
        expect(response).to redirect_to(widget)
      end
    end

    describe "with invalid params" do
      it "assigns the widget as @widget" do
        widget = Widget.create! valid_attributes
        put :update, {:id => widget.to_param, :widget => invalid_attributes}, valid_session
        expect(assigns(:widget)).to eq(widget)
      end

      it "re-renders the 'edit' template" do
        widget = Widget.create! valid_attributes
        allow_any_instance_of(Widget).to receive(:save).and_return(false)
        put :update, {:id => widget.to_param, :widget => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested widget" do
      widget = Widget.create! valid_attributes
      expect {
        delete :destroy, {:id => widget.to_param}, valid_session
      }.to change(Widget, :count).by(-1)
    end

    it "redirects to the widgets list" do
      widget = Widget.create! valid_attributes
      delete :destroy, {:id => widget.to_param}, valid_session
      expect(response).to redirect_to(widgets_url)
      puts "widgets_url"
      puts widgets_url
    end
  end

end
